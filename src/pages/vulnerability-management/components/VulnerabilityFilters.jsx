import React, { useState } from 'react';

import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';

const VulnerabilityFilters = ({ onFiltersChange, activeFilters = {} }) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [searchTerm, setSearchTerm] = useState(activeFilters?.search || '');
  const [selectedSeverity, setSelectedSeverity] = useState(activeFilters?.severity || []);
  const [selectedStatus, setSelectedStatus] = useState(activeFilters?.status || []);
  const [selectedAssetType, setSelectedAssetType] = useState(activeFilters?.assetType || []);
  const [ageRange, setAgeRange] = useState(activeFilters?.ageRange || 'all');

  const severityOptions = [
    { value: 'critical', label: 'Critical', color: 'text-error', count: 23 },
    { value: 'high', label: 'High', color: 'text-warning', count: 87 },
    { value: 'medium', label: 'Medium', color: 'text-accent', count: 156 },
    { value: 'low', label: 'Low', color: 'text-success', count: 234 }
  ];

  const statusOptions = [
    { value: 'open', label: 'Open', count: 342 },
    { value: 'in-progress', label: 'In Progress', count: 89 },
    { value: 'resolved', label: 'Resolved', count: 156 },
    { value: 'false-positive', label: 'False Positive', count: 23 }
  ];

  const assetTypeOptions = [
    { value: 'web-app', label: 'Web Applications', count: 187 },
    { value: 'network', label: 'Network Infrastructure', count: 143 },
    { value: 'os', label: 'Operating Systems', count: 98 },
    { value: 'database', label: 'Databases', count: 72 }
  ];

  const ageRangeOptions = [
    { value: 'all', label: 'All Time' },
    { value: '7d', label: 'Last 7 days' },
    { value: '30d', label: 'Last 30 days' },
    { value: '90d', label: 'Last 90 days' },
    { value: '1y', label: 'Last year' }
  ];

  const savedFilters = [
    { name: 'Critical & High Priority', icon: 'AlertTriangle', count: 110 },
    { name: 'Web Application Vulnerabilities', icon: 'Globe', count: 187 },
    { name: 'Recently Discovered', icon: 'Clock', count: 45 },
    { name: 'Pending Remediation', icon: 'AlertCircle', count: 89 }
  ];

  const handleSeverityToggle = (severity) => {
    const updated = selectedSeverity?.includes(severity)
      ? selectedSeverity?.filter(s => s !== severity)
      : [...selectedSeverity, severity];
    setSelectedSeverity(updated);
    applyFilters({ severity: updated });
  };

  const handleStatusToggle = (status) => {
    const updated = selectedStatus?.includes(status)
      ? selectedStatus?.filter(s => s !== status)
      : [...selectedStatus, status];
    setSelectedStatus(updated);
    applyFilters({ status: updated });
  };

  const handleAssetTypeToggle = (assetType) => {
    const updated = selectedAssetType?.includes(assetType)
      ? selectedAssetType?.filter(a => a !== assetType)
      : [...selectedAssetType, assetType];
    setSelectedAssetType(updated);
    applyFilters({ assetType: updated });
  };

  const handleAgeRangeChange = (range) => {
    setAgeRange(range);
    applyFilters({ ageRange: range });
  };

  const handleSearchChange = (e) => {
    const value = e?.target?.value;
    setSearchTerm(value);
    applyFilters({ search: value });
  };

  const applyFilters = (newFilters) => {
    const filters = {
      search: searchTerm,
      severity: selectedSeverity,
      status: selectedStatus,
      assetType: selectedAssetType,
      ageRange,
      ...newFilters
    };
    onFiltersChange(filters);
  };

  const clearAllFilters = () => {
    setSearchTerm('');
    setSelectedSeverity([]);
    setSelectedStatus([]);
    setSelectedAssetType([]);
    setAgeRange('all');
    onFiltersChange({});
  };

  const getActiveFilterCount = () => {
    return selectedSeverity?.length + selectedStatus?.length + selectedAssetType?.length + 
           (ageRange !== 'all' ? 1 : 0) + (searchTerm ? 1 : 0);
  };

  return (
    <div className="bg-card rounded-lg security-shadow mb-6">
      {/* Filter Header */}
      <div className="flex items-center justify-between p-4 border-b border-border">
        <div className="flex items-center space-x-4">
          <h3 className="text-lg font-semibold text-card-foreground">Filters</h3>
          {getActiveFilterCount() > 0 && (
            <span className="bg-primary text-primary-foreground text-xs px-2 py-1 rounded-full">
              {getActiveFilterCount()} active
            </span>
          )}
        </div>
        <div className="flex items-center space-x-2">
          {getActiveFilterCount() > 0 && (
            <Button variant="ghost" size="sm" onClick={clearAllFilters}>
              Clear All
            </Button>
          )}
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsExpanded(!isExpanded)}
            iconName={isExpanded ? "ChevronUp" : "ChevronDown"}
            iconPosition="right"
          >
            {isExpanded ? 'Collapse' : 'Expand'}
          </Button>
        </div>
      </div>
      {/* Search Bar */}
      <div className="p-4 border-b border-border">
        <Input
          type="search"
          placeholder="Search vulnerabilities by CVE ID, description, or affected system..."
          value={searchTerm}
          onChange={handleSearchChange}
          className="w-full"
        />
      </div>
      {/* Saved Filters */}
      <div className="p-4 border-b border-border">
        <h4 className="text-sm font-medium text-card-foreground mb-3">Quick Filters</h4>
        <div className="flex flex-wrap gap-2">
          {savedFilters?.map((filter) => (
            <Button
              key={filter?.name}
              variant="outline"
              size="sm"
              iconName={filter?.icon}
              iconPosition="left"
              className="text-sm"
            >
              {filter?.name} ({filter?.count})
            </Button>
          ))}
        </div>
      </div>
      {/* Expanded Filters */}
      {isExpanded && (
        <div className="p-4 space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            {/* Severity Filter */}
            <div>
              <h4 className="text-sm font-medium text-card-foreground mb-3">Severity</h4>
              <div className="space-y-2">
                {severityOptions?.map((option) => (
                  <label key={option?.value} className="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={selectedSeverity?.includes(option?.value)}
                      onChange={() => handleSeverityToggle(option?.value)}
                      className="rounded border-border"
                    />
                    <span className={`text-sm ${option?.color}`}>{option?.label}</span>
                    <span className="text-xs text-muted-foreground">({option?.count})</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Status Filter */}
            <div>
              <h4 className="text-sm font-medium text-card-foreground mb-3">Status</h4>
              <div className="space-y-2">
                {statusOptions?.map((option) => (
                  <label key={option?.value} className="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={selectedStatus?.includes(option?.value)}
                      onChange={() => handleStatusToggle(option?.value)}
                      className="rounded border-border"
                    />
                    <span className="text-sm text-card-foreground">{option?.label}</span>
                    <span className="text-xs text-muted-foreground">({option?.count})</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Asset Type Filter */}
            <div>
              <h4 className="text-sm font-medium text-card-foreground mb-3">Asset Type</h4>
              <div className="space-y-2">
                {assetTypeOptions?.map((option) => (
                  <label key={option?.value} className="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="checkbox"
                      checked={selectedAssetType?.includes(option?.value)}
                      onChange={() => handleAssetTypeToggle(option?.value)}
                      className="rounded border-border"
                    />
                    <span className="text-sm text-card-foreground">{option?.label}</span>
                    <span className="text-xs text-muted-foreground">({option?.count})</span>
                  </label>
                ))}
              </div>
            </div>

            {/* Age Range Filter */}
            <div>
              <h4 className="text-sm font-medium text-card-foreground mb-3">Discovery Date</h4>
              <div className="space-y-2">
                {ageRangeOptions?.map((option) => (
                  <label key={option?.value} className="flex items-center space-x-2 cursor-pointer">
                    <input
                      type="radio"
                      name="ageRange"
                      value={option?.value}
                      checked={ageRange === option?.value}
                      onChange={() => handleAgeRangeChange(option?.value)}
                      className="rounded-full border-border"
                    />
                    <span className="text-sm text-card-foreground">{option?.label}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default VulnerabilityFilters;