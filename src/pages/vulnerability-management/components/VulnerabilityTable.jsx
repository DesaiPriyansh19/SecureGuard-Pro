import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';

const VulnerabilityTable = ({ vulnerabilities, onBulkAction, onRowAction }) => {
  const [selectedRows, setSelectedRows] = useState(new Set());
  const [expandedRows, setExpandedRows] = useState(new Set());
  const [sortConfig, setSortConfig] = useState({ key: 'discoveryDate', direction: 'desc' });

  const handleSelectAll = (checked) => {
    if (checked) {
      setSelectedRows(new Set(vulnerabilities.map(v => v.id)));
    } else {
      setSelectedRows(new Set());
    }
  };

  const handleSelectRow = (id, checked) => {
    const newSelected = new Set(selectedRows);
    if (checked) {
      newSelected?.add(id);
    } else {
      newSelected?.delete(id);
    }
    setSelectedRows(newSelected);
  };

  const handleExpandRow = (id) => {
    const newExpanded = new Set(expandedRows);
    if (newExpanded?.has(id)) {
      newExpanded?.delete(id);
    } else {
      newExpanded?.add(id);
    }
    setExpandedRows(newExpanded);
  };

  const handleSort = (key) => {
    const direction = sortConfig?.key === key && sortConfig?.direction === 'asc' ? 'desc' : 'asc';
    setSortConfig({ key, direction });
  };

  const getSeverityColor = (severity) => {
    switch (severity?.toLowerCase()) {
      case 'critical': return 'text-error bg-error/10';
      case 'high': return 'text-warning bg-warning/10';
      case 'medium': return 'text-accent bg-accent/10';
      case 'low': return 'text-success bg-success/10';
      default: return 'text-muted-foreground bg-muted';
    }
  };

  const getStatusColor = (status) => {
    switch (status?.toLowerCase()) {
      case 'open': return 'text-error bg-error/10';
      case 'in-progress': return 'text-warning bg-warning/10';
      case 'resolved': return 'text-success bg-success/10';
      case 'false-positive': return 'text-muted-foreground bg-muted';
      default: return 'text-muted-foreground bg-muted';
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString)?.toLocaleDateString('en-US', {
      month: 'short',
      day: 'numeric',
      year: 'numeric'
    });
  };

  const sortedVulnerabilities = [...vulnerabilities]?.sort((a, b) => {
    const aValue = a?.[sortConfig?.key];
    const bValue = b?.[sortConfig?.key];
    
    if (sortConfig?.direction === 'asc') {
      return aValue > bValue ? 1 : -1;
    } else {
      return aValue < bValue ? 1 : -1;
    }
  });

  return (
    <div className="bg-card rounded-lg security-shadow">
      {/* Table Header with Bulk Actions */}
      {selectedRows?.size > 0 && (
        <div className="flex items-center justify-between p-4 bg-primary/5 border-b border-border">
          <div className="flex items-center space-x-4">
            <span className="text-sm font-medium text-card-foreground">
              {selectedRows?.size} vulnerabilities selected
            </span>
          </div>
          <div className="flex items-center space-x-2">
            <Button
              variant="outline"
              size="sm"
              iconName="UserPlus"
              iconPosition="left"
              onClick={() => onBulkAction('assign', Array.from(selectedRows))}
            >
              Assign
            </Button>
            <Button
              variant="outline"
              size="sm"
              iconName="CheckCircle"
              iconPosition="left"
              onClick={() => onBulkAction('resolve', Array.from(selectedRows))}
            >
              Mark Resolved
            </Button>
            <Button
              variant="outline"
              size="sm"
              iconName="FileText"
              iconPosition="left"
              onClick={() => onBulkAction('export', Array.from(selectedRows))}
            >
              Export
            </Button>
          </div>
        </div>
      )}
      {/* Table */}
      <div className="overflow-x-auto">
        <table className="w-full">
          <thead className="bg-muted/50 border-b border-border">
            <tr>
              <th className="w-12 p-4">
                <input
                  type="checkbox"
                  checked={selectedRows?.size === vulnerabilities?.length && vulnerabilities?.length > 0}
                  onChange={(e) => handleSelectAll(e?.target?.checked)}
                  className="rounded border-border"
                />
              </th>
              <th className="text-left p-4 text-sm font-medium text-card-foreground cursor-pointer hover:bg-muted/70 transition-security"
                  onClick={() => handleSort('cveId')}>
                <div className="flex items-center space-x-1">
                  <span>CVE ID</span>
                  <Icon name="ArrowUpDown" size={14} />
                </div>
              </th>
              <th className="text-left p-4 text-sm font-medium text-card-foreground cursor-pointer hover:bg-muted/70 transition-security"
                  onClick={() => handleSort('severity')}>
                <div className="flex items-center space-x-1">
                  <span>Severity</span>
                  <Icon name="ArrowUpDown" size={14} />
                </div>
              </th>
              <th className="text-left p-4 text-sm font-medium text-card-foreground cursor-pointer hover:bg-muted/70 transition-security"
                  onClick={() => handleSort('cvssScore')}>
                <div className="flex items-center space-x-1">
                  <span>CVSS Score</span>
                  <Icon name="ArrowUpDown" size={14} />
                </div>
              </th>
              <th className="text-left p-4 text-sm font-medium text-card-foreground">Affected Systems</th>
              <th className="text-left p-4 text-sm font-medium text-card-foreground cursor-pointer hover:bg-muted/70 transition-security"
                  onClick={() => handleSort('discoveryDate')}>
                <div className="flex items-center space-x-1">
                  <span>Discovery Date</span>
                  <Icon name="ArrowUpDown" size={14} />
                </div>
              </th>
              <th className="text-left p-4 text-sm font-medium text-card-foreground">Status</th>
              <th className="text-left p-4 text-sm font-medium text-card-foreground">Actions</th>
            </tr>
          </thead>
          <tbody>
            {sortedVulnerabilities?.map((vulnerability) => (
              <React.Fragment key={vulnerability?.id}>
                <tr className="border-b border-border hover:bg-muted/30 transition-security">
                  <td className="p-4">
                    <input
                      type="checkbox"
                      checked={selectedRows?.has(vulnerability?.id)}
                      onChange={(e) => handleSelectRow(vulnerability?.id, e?.target?.checked)}
                      className="rounded border-border"
                    />
                  </td>
                  <td className="p-4">
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="ghost"
                        size="sm"
                        iconName={expandedRows?.has(vulnerability?.id) ? "ChevronDown" : "ChevronRight"}
                        onClick={() => handleExpandRow(vulnerability?.id)}
                        className="p-1"
                      />
                      <span className="font-mono text-sm text-primary hover:underline cursor-pointer">
                        {vulnerability?.cveId}
                      </span>
                    </div>
                  </td>
                  <td className="p-4">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getSeverityColor(vulnerability?.severity)}`}>
                      {vulnerability?.severity}
                    </span>
                  </td>
                  <td className="p-4">
                    <div className="flex items-center space-x-2">
                      <span className="font-semibold text-card-foreground">{vulnerability?.cvssScore}</span>
                      <div className="w-16 h-2 bg-muted rounded-full overflow-hidden">
                        <div 
                          className={`h-full ${vulnerability?.cvssScore >= 9 ? 'bg-error' : 
                            vulnerability?.cvssScore >= 7 ? 'bg-warning' : 
                            vulnerability?.cvssScore >= 4 ? 'bg-accent' : 'bg-success'}`}
                          style={{ width: `${(vulnerability?.cvssScore / 10) * 100}%` }}
                        />
                      </div>
                    </div>
                  </td>
                  <td className="p-4">
                    <div className="text-sm text-card-foreground">
                      {vulnerability?.affectedSystems?.length} systems
                      <div className="text-xs text-muted-foreground mt-1">
                        {vulnerability?.affectedSystems?.slice(0, 2)?.join(', ')}
                        {vulnerability?.affectedSystems?.length > 2 && ` +${vulnerability?.affectedSystems?.length - 2} more`}
                      </div>
                    </div>
                  </td>
                  <td className="p-4 text-sm text-card-foreground">
                    {formatDate(vulnerability?.discoveryDate)}
                  </td>
                  <td className="p-4">
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusColor(vulnerability?.status)}`}>
                      {vulnerability?.status?.replace('-', ' ')}
                    </span>
                  </td>
                  <td className="p-4">
                    <div className="flex items-center space-x-1">
                      <Button
                        variant="ghost"
                        size="sm"
                        iconName="Eye"
                        onClick={() => onRowAction('view', vulnerability)}
                      />
                      <Button
                        variant="ghost"
                        size="sm"
                        iconName="Edit"
                        onClick={() => onRowAction('edit', vulnerability)}
                      />
                      <Button
                        variant="ghost"
                        size="sm"
                        iconName="MoreHorizontal"
                        onClick={() => onRowAction('menu', vulnerability)}
                      />
                    </div>
                  </td>
                </tr>
                
                {/* Expanded Row Details */}
                {expandedRows?.has(vulnerability?.id) && (
                  <tr className="bg-muted/20 border-b border-border">
                    <td colSpan="8" className="p-6">
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                        <div>
                          <h4 className="font-semibold text-card-foreground mb-3">Vulnerability Details</h4>
                          <div className="space-y-3">
                            <div>
                              <span className="text-sm font-medium text-card-foreground">Description:</span>
                              <p className="text-sm text-muted-foreground mt-1">{vulnerability?.description}</p>
                            </div>
                            <div>
                              <span className="text-sm font-medium text-card-foreground">Exploit Available:</span>
                              <span className={`ml-2 text-sm ${vulnerability?.exploitAvailable ? 'text-error' : 'text-success'}`}>
                                {vulnerability?.exploitAvailable ? 'Yes' : 'No'}
                              </span>
                            </div>
                            <div>
                              <span className="text-sm font-medium text-card-foreground">Affected Versions:</span>
                              <p className="text-sm text-muted-foreground mt-1">{vulnerability?.affectedVersions}</p>
                            </div>
                          </div>
                        </div>
                        
                        <div>
                          <h4 className="font-semibold text-card-foreground mb-3">Remediation</h4>
                          <div className="space-y-3">
                            <div>
                              <span className="text-sm font-medium text-card-foreground">Recommended Action:</span>
                              <p className="text-sm text-muted-foreground mt-1">{vulnerability?.recommendedAction}</p>
                            </div>
                            <div>
                              <span className="text-sm font-medium text-card-foreground">Assigned To:</span>
                              <span className="ml-2 text-sm text-card-foreground">{vulnerability?.assignedTo || 'Unassigned'}</span>
                            </div>
                            <div className="flex space-x-2 mt-4">
                              <Button variant="outline" size="sm" iconName="UserPlus" iconPosition="left">
                                Assign
                              </Button>
                              <Button variant="outline" size="sm" iconName="Calendar" iconPosition="left">
                                Schedule
                              </Button>
                              <Button variant="outline" size="sm" iconName="MessageSquare" iconPosition="left">
                                Comment
                              </Button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </td>
                  </tr>
                )}
              </React.Fragment>
            ))}
          </tbody>
        </table>
      </div>
      {/* Table Footer */}
      <div className="flex items-center justify-between p-4 border-t border-border">
        <div className="text-sm text-muted-foreground">
          Showing {vulnerabilities?.length} of {vulnerabilities?.length} vulnerabilities
        </div>
        <div className="flex items-center space-x-2">
          <Button variant="outline" size="sm" iconName="ChevronLeft" disabled>
            Previous
          </Button>
          <span className="text-sm text-card-foreground px-3 py-1 bg-primary text-primary-foreground rounded">
            1
          </span>
          <Button variant="outline" size="sm" iconName="ChevronRight" disabled>
            Next
          </Button>
        </div>
      </div>
    </div>
  );
};

export default VulnerabilityTable;